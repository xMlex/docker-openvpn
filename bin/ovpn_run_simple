#!/bin/bash
#
# Run the OpenVPN server normally
#
if [ "$DEBUG" == "1" ]; then set -x; fi;
set -e
cd $OPENVPN

if ! [ -f "$EASYRSA_VARS_FILE" ]; then
    echo "$EASYRSA_VARS_FILE not exists."
    cp $EASYRSA/vars.example $EASYRSA_VARS_FILE
fi
if ! [ -d "$EASYRSA_PKI" ]; then
    echo "$EASYRSA_PKI not exists, generate"
    easyrsa init-pki
fi

if ! [ -f "$EASYRSA_PKI/ca.crt" ]; then
    echo "$EASYRSA_PKI/ca.crt not exists, generate"
    easyrsa --batch build-ca nopass
    if [ -f "$EASYRSA_PKI/ca.crt" ]; then
      cp $EASYRSA_PKI/ca.crt $OPENVPN/ca.crt;
    else
      echo "Generate ca.crt FAIL";
      exit 1;
    fi;
fi

if ! [ -f "$OPENVPN/server.key" ]; then
    echo "$OPENVPN/server.key not exists, generate"
    easyrsa --batch gen-req server nopass
    if [ -f "$EASYRSA_PKI/private/server.key" ]; then
      cp $EASYRSA_PKI/private/server.key $OPENVPN/server.key;
    else
      echo "Generate server key FAIL";
      exit 1;
    fi;
fi

if ! [ -f "$OPENVPN/server.crt" ]; then
    echo "$OPENVPN/server.crt not exists, generate"
    if ! [ -f "$EASYRSA_PKI/issued/server.crt" ]; then
      easyrsa --batch sign-req server server
    fi;
    if [ -f "$EASYRSA_PKI/issued/server.crt" ]; then
      cp $EASYRSA_PKI/issued/server.crt $OPENVPN/server.crt;
    else
      echo "Generate server crt FAIL";
      exit 1;
    fi;
fi

if ! [ -f "$EASYRSA_PKI/dh.pem" ]; then
  easyrsa gen-dh
  cp $EASYRSA_PKI/dh.pem $OPENVPN/dh.pem;
fi
if ! [ -f "$OPENVPN/ta.key" ]; then
  openvpn --genkey --secret ta.key
fi
if ! [ -f "$EASYRSA_PKI/crl.pem" ]; then
  easyrsa gen-crl
fi
if ! [ -f "$OPENVPN/server.conf" ]; then
  cp /opt/server.conf $OPENVPN/server.conf
fi

# Build runtime arguments array based on environment
USER_ARGS=("${@}")
ARGS=()

# Checks if ARGS already contains the given value
function hasArg {
    local element
    for element in "${@:2}"; do
        [ "${element}" == "${1}" ] && return 0
    done
    return 1
}

# Adds the given argument if it's not already specified.
function addArg {
    local arg="${1}"
    [ $# -ge 1 ] && local val="${2}"
    if ! hasArg "${arg}" "${USER_ARGS[@]}"; then
        ARGS+=("${arg}")
        [ $# -ge 1 ] && ARGS+=("${val}")
    fi
}

# set up iptables rules and routing
# this allows rules/routing to be altered by supplying this function
# in an included file, such as ovpn_env.sh
function setupIptablesAndRouting {
    iptables -t nat -C POSTROUTING -s $OVPN_SERVER -o $OVPN_NATDEVICE -j MASQUERADE || {
      iptables -t nat -A POSTROUTING -s $OVPN_SERVER -o $OVPN_NATDEVICE -j MASQUERADE
    }
    for i in "${OVPN_ROUTES[@]}"; do
        iptables -t nat -C POSTROUTING -s "$i" -o $OVPN_NATDEVICE -j MASQUERADE || {
          iptables -t nat -A POSTROUTING -s "$i" -o $OVPN_NATDEVICE -j MASQUERADE
        }
    done
}


addArg "--config" "$OPENVPN/server.conf"
addArg "--cd" "$OPENVPN"

#if [ -f "$EASYRSA_PKI/crl.pem" ]; then
#   addArg "--crl-verify" "$EASYRSA_PKI/crl.pem"
#fi

if [ -f "$OPENVPN/ovpn_env.sh" ]; then
    echo "ENV file found!"
    source "$OPENVPN/ovpn_env.sh"
fi

if [ -f "$OPENVPN/ovpn_init.sh" ]; then
    echo "INIT file found!"
    bash "$OPENVPN/ovpn_init.sh"
fi

mkdir -p /dev/net
if [ ! -c /dev/net/tun ]; then
    mknod /dev/net/tun c 10 200
fi

if [ -d "$OPENVPN/ccd" ]; then
    addArg "--client-config-dir" "$OPENVPN/ccd"
fi

# When using --net=host, use this to specify nat device.
#[ -z "$OVPN_NATDEVICE" ] && OVPN_NATDEVICE=eth0

# Setup NAT forwarding if requested
#if [ "$OVPN_DEFROUTE" != "0" ] || [ "$OVPN_NAT" == "1" ] ; then
#	# call function to setup iptables rules and routing
	# this allows rules to be customized by supplying
	# a replacement function in, for example, ovpn_env.sh
#	setupIptablesAndRouting
#fi

# Use a hacky hardlink as the CRL Needs to be readable by the user/group
# OpenVPN is running as.  Only pass arguments to OpenVPN if it's found.
#if [ -r "$EASYRSA_PKI/crl.pem" ]; then
#    if [ ! -r "$OPENVPN/crl.pem" ]; then
##        ln "$EASYRSA_PKI/crl.pem" "$OPENVPN/crl.pem"
#       chmod 644 "$OPENVPN/crl.pem"
#    fi
#    addArg "--crl-verify" "$OPENVPN/crl.pem"
#fi

#ip -6 route show default 2>/dev/null
#if [ $? = 0 ]; then
#    echo "Enabling IPv6 Forwarding"
#    # If this fails, ensure the docker container is run with --privileged
#    # Could be side stepped with `ip netns` madness to drop privileged flag
#
#    sysctl -w net.ipv6.conf.default.forwarding=1 || echo "Failed to enable IPv6 Forwarding default"
#    sysctl -w net.ipv6.conf.all.forwarding=1 || echo "Failed to enable IPv6 Forwarding"
#fi

echo "Running 'openvpn ${ARGS[@]} ${USER_ARGS[@]}'"
exec openvpn ${ARGS[@]} ${USER_ARGS[@]}
echo "Openvpn EXIT"
